import json

from asgiref.sync import sync_to_async
from django.conf import settings
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, HttpResponseForbidden
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from telegram import Bot

from users_app.forms import ServiceForm, ServiceKeyForm
from users_app.models import NumbersService, Rules, Key, User


def login_view(request):
    error_message = None

    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('about')
        else:
            error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å."

    return render(request, 'html/login.html', {'error_message': error_message})


@login_required
def logout_view(request):
    logout(request)
    return redirect('login')


@login_required
def about_view(request):
    return render(request, 'html/about.html')


@login_required
def index(request):
    return render(request, 'html/index.html')


@login_required
def faq(request):
    return render(request, 'html/a_faq.html')


@login_required
def settings_rules(request):
    if request.method == 'POST':
        form = ServiceForm(user=request.user, data=request.POST)

        if form.is_valid():
            print('–§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ñ–ª–∞–≥ "–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
            any_sender = form.cleaned_data.get('any_sender', False)
            if any_sender:  # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                sender = '–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
            else:
                sender = form.cleaned_data['sender']

            telephone = form.cleaned_data['telephone']
            telegram_chat = form.cleaned_data['telegram_chat']

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å —É—á–µ—Ç–æ–º —Ñ–ª–∞–≥–∞
            Rules.objects.create(
                user=request.user,
                sender=sender,
                from_whom=telephone,
                to_whom=telegram_chat
            )

            return redirect('settings_rules')

        else:
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
            print("–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã: ", form.errors)

    else:
        form = ServiceForm(user=request.user)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rules = Rules.objects.filter(user=request.user)

    return render(request, 'html/a_my_forms.html', {'form': form, 'user_rules': user_rules})


@login_required
def delete_rule(request, rule_id):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –µ–≥–æ ID
    rule = get_object_or_404(Rules, id=rule_id, user=request.user)

    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    if request.method == 'POST':
        rule.delete()
        return redirect('settings_rules')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ POST, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    return render(request, 'html/confirm_delete.html', {'rule': rule})


@login_required
def settings_service(request):
    if request.method == 'POST':
        form = ServiceKeyForm(request.POST)
        if form.is_valid():
            service = form.cleaned_data['service']
            name = form.cleaned_data['name']

            if service == 'Novofon':
                telephone = form.cleaned_data['telephone']
                NumbersService.objects.create(user=request.user, name=service, telephone=telephone)
                return JsonResponse({"success": True})
            else:
                key = form.cleaned_data['key']
                Key.objects.create(user=request.user, name=service, title=name, token=key)
                return JsonResponse({"success": True})
        else:
            return JsonResponse({"success": False, "errors": form.errors})
    else:
        form = ServiceKeyForm()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = Key.objects.filter(user=request.user)
    user_numbers = NumbersService.objects.filter(user=request.user)

    return render(
        request,
        'html/a_my_input.html',
        {'form': form, 'user_keys': user_keys, 'user_numbers': user_numbers}
    )


@login_required
def delete_number_service(request, id):
    service = get_object_or_404(NumbersService, id=id, user=request.user)
    service.delete()
    return redirect('settings_service')


@login_required
def delete_service(request, key_id):
    key = get_object_or_404(Key, id=key_id, user=request.user)

    if request.method == 'POST':
        key.delete()
        return redirect('settings_service')

    return render(request, 'html/confirm_delete.html', {'key': key})


@csrf_exempt
async def get_webhook(request, token):
    if request.method == 'POST':
        try:
            try:
                user = await sync_to_async(User.objects.get)(token_url=token)
            except User.DoesNotExist:
                return HttpResponseForbidden('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω')

            data = json.loads(request.body)
            print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data)

            if 'result' in data:
                result = data['result']
                caller_did = result.get('caller_did', '–ù–µ —É–∫–∞–∑–∞–Ω')
                caller_id = result.get('caller_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
                text = result.get('text', '–ù–µ —É–∫–∞–∑–∞–Ω')

                print("üìû –ù–∞ –Ω–æ–º–µ—Ä:", caller_did)
                print("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:", caller_id)
                print("üí¨ –¢–µ–∫—Å—Ç:", text)

                rules = await sync_to_async(Rules.objects.filter)(user=user)
                matched_rules = await sync_to_async(
                    lambda: list(rules.filter(
                        sender__in=[caller_id, "–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"],
                        from_whom=caller_did
                    ))
                )()

                print("‚úÖ –ü—Ä–∞–≤–∏–ª –Ω–∞–π–¥–µ–Ω–æ:", len(matched_rules))

                if matched_rules:
                    tg_bot = Bot(settings.TOKEN_BOT)
                    for rule in matched_rules:
                        to_whom_chat_id = await sync_to_async(lambda: rule.to_whom.chat_id)()
                        message_text = (
                            f'–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {caller_id}\n'
                            f'–ù–∞ –Ω–æ–º–µ—Ä: {caller_did}\n'
                            f'–¢–µ–∫—Å—Ç: {text}'
                        )

                        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç {to_whom_chat_id}")
                        await tg_bot.send_message(chat_id=to_whom_chat_id, text=message_text)

                    return JsonResponse({
                        'status': 'success',
                        'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã',
                        'rules_count': len(matched_rules)
                    }, status=200)
                else:
                    print("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return JsonResponse({
                        'status': 'success',
                        'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    }, status=200)
            else:
                return JsonResponse({'status': 'error', 'message': '–ö–ª—é—á \"result\" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, status=400)

        except json.JSONDecodeError:
            print("‚ùå JSON Decode Error")
            return JsonResponse({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'}, status=400)
    else:
        return JsonResponse({'status': 'error', 'message': '–¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'}, status=405)

