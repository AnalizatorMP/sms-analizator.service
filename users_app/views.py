import json
import logging
import time
from django.db import connections

from asgiref.sync import sync_to_async
from django.conf import settings
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, HttpResponseForbidden
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from django.db.utils import OperationalError
from telegram import Bot

from users_app.forms import ServiceForm, ServiceKeyForm
from users_app.models import NumbersService, Rules, Key, User

logger = logging.getLogger(__name__)


def login_view(request):
    error_message = None

    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.phone} (ID: {user.id})")
            return redirect('about')
        else:
            error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å."
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

    return render(request, 'html/login.html', {'error_message': error_message})


@login_required
def logout_view(request):
    user_info = f"{request.user.phone} (ID: {request.user.id})"
    logout(request)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {user_info}")
    return redirect('login')


@login_required
def about_view(request):
    return render(request, 'html/about.html')


@login_required
def index(request):
    return render(request, 'html/index.html')


@login_required
def faq(request):
    return render(request, 'html/a_faq.html')


@login_required
def settings_rules(request):
    if request.method == 'POST':
        form = ServiceForm(user=request.user, data=request.POST)

        if form.is_valid():
            logger.info(f"–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.phone}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ñ–ª–∞–≥ "–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
            any_sender = form.cleaned_data.get('any_sender', False)
            if any_sender:  # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                sender = '–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
            else:
                sender = form.cleaned_data['sender']

            telephone = form.cleaned_data['telephone']
            telegram_chat = form.cleaned_data['telegram_chat']

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å —É—á–µ—Ç–æ–º —Ñ–ª–∞–≥–∞
            rule = Rules.objects.create(
                user=request.user,
                sender=sender,
                from_whom=telephone,
                to_whom=telegram_chat
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ (ID: {rule.id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.phone}: {sender} -> {telegram_chat.title}")

            return redirect('settings_rules')

        else:
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
            logger.warning(f"–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.phone}: {form.errors}")

    else:
        form = ServiceForm(user=request.user)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rules = Rules.objects.filter(user=request.user)

    return render(request, 'html/a_my_forms.html', {'form': form, 'user_rules': user_rules})


@login_required
def delete_rule(request, rule_id):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –µ–≥–æ ID
    rule = get_object_or_404(Rules, id=rule_id, user=request.user)

    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    if request.method == 'POST':
        rule_info = f"Rule ID: {rule.id}, Sender: {rule.sender}, From: {rule.from_whom.telephone}"
        rule.delete()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.phone} —É–¥–∞–ª–∏–ª –ø—Ä–∞–≤–∏–ª–æ: {rule_info}")
        return redirect('settings_rules')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ POST, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    return render(request, 'html/confirm_delete.html', {'rule': rule})


@login_required
def settings_service(request):
    if request.method == 'POST':
        form = ServiceKeyForm(request.POST)
        if form.is_valid():
            service = form.cleaned_data['service']
            name = form.cleaned_data['name']

            if service == 'Novofon':
                telephone = form.cleaned_data['telephone']
                number_service = NumbersService.objects.create(user=request.user, name=service, telephone=telephone)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.phone} –¥–æ–±–∞–≤–∏–ª –Ω–æ–º–µ—Ä Novofon: {telephone}")
                return JsonResponse({"success": True})
            else:
                key = form.cleaned_data['key']
                api_key = Key.objects.create(user=request.user, name=service, title=name, token=key)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.phone} –¥–æ–±–∞–≤–∏–ª API –∫–ª—é—á {service}: {name}")
                return JsonResponse({"success": True})
        else:
            return JsonResponse({"success": False, "errors": form.errors})
    else:
        form = ServiceKeyForm()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = Key.objects.filter(user=request.user)
    user_numbers = NumbersService.objects.filter(user=request.user)

    return render(
        request,
        'html/a_my_input.html',
        {'form': form, 'user_keys': user_keys, 'user_numbers': user_numbers}
    )


@login_required
def delete_number_service(request, id):
    service = get_object_or_404(NumbersService, id=id, user=request.user)
    service_info = f"Service: {service.name}, Phone: {service.telephone}"
    service.delete()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.phone} —É–¥–∞–ª–∏–ª –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞: {service_info}")
    return redirect('settings_service')


@login_required
def delete_service(request, key_id):
    key = get_object_or_404(Key, id=key_id, user=request.user)

    if request.method == 'POST':
        key_info = f"Service: {key.name}, Title: {key.title}"
        key.delete()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.phone} —É–¥–∞–ª–∏–ª API –∫–ª—é—á: {key_info}")
        return redirect('settings_service')

    return render(request, 'html/confirm_delete.html', {'key': key})


async def get_user_by_token_with_retry(token, max_retries=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
    for attempt in range(max_retries):
        try:
            logger.info(f"üîç WEBHOOK: –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É {token[:8]}...")
            user = await sync_to_async(User.objects.get)(token_url=token)
            logger.info(f"‚úÖ WEBHOOK: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.phone} (ID: {user.id})")
            return user
        except User.DoesNotExist:
            logger.warning(f"‚ùå WEBHOOK: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–æ–∫–µ–Ω–æ–º {token[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except OperationalError as e:
            if e.args[0] in (2006, 2013):  # MySQL connection errors
                logger.warning(f"‚ö†Ô∏è WEBHOOK: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    connections.close_all()
                    await sync_to_async(time.sleep)(0.5 * (2 ** attempt))
                    continue
            raise
        except Exception as e:
            logger.error(f"üí• WEBHOOK: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    logger.error(f"üí• WEBHOOK: –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    raise Exception("Failed to get user after all retries")


async def get_rules_with_retry(user, max_retries=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
    for attempt in range(max_retries):
        try:
            logger.info(f"üîç WEBHOOK: –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.phone}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select_related –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            rules_queryset = Rules.objects.filter(user=user).select_related('to_whom', 'from_whom')
            rules_list = await sync_to_async(lambda: list(rules_queryset))()
            logger.info(f"‚úÖ WEBHOOK: –Ω–∞–π–¥–µ–Ω–æ {len(rules_list)} –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.phone}")
            return rules_list
        except OperationalError as e:
            if e.args[0] in (2006, 2013):  # MySQL connection errors
                logger.warning(f"‚ö†Ô∏è WEBHOOK: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    connections.close_all()
                    await sync_to_async(time.sleep)(0.5 * (2 ** attempt))
                    continue
            raise
        except Exception as e:
            logger.error(f"üí• WEBHOOK: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            raise
    
    logger.error(f"üí• WEBHOOK: –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    raise Exception("Failed to get rules after all retries")


@csrf_exempt
async def get_webhook(request, token):
    # –õ–æ–≥–∏—Ä—É–µ–º –ö–ê–ñ–î–´–ô –∑–∞–ø—Ä–æ—Å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    client_ip = request.META.get('HTTP_X_FORWARDED_FOR', request.META.get('REMOTE_ADDR', 'unknown'))
    
    logger.info(f"üåç WEBHOOK –ó–ê–ü–†–û–° [{timestamp}]: {request.method} –æ—Ç IP {client_ip}, —Ç–æ–∫–µ–Ω: {token[:8]}...")
    
    if request.method != 'POST':
        logger.warning(f"‚ùå WEBHOOK: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ {request.method}")
        return JsonResponse({'status': 'error', 'message': '–¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'}, status=405)

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        raw_body = request.body
        logger.info(f"üì• WEBHOOK: –ø–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(raw_body)} –±–∞–π—Ç): {raw_body[:500]}")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            data = json.loads(raw_body)
            logger.info(f"üìã WEBHOOK: JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {json.dumps(data, ensure_ascii=False, indent=2)}")
        except json.JSONDecodeError as e:
            logger.error(f"üí• WEBHOOK: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"üí• WEBHOOK: –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_body}")
            return JsonResponse({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'}, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_token_with_retry(token)
        if user is None:
            return HttpResponseForbidden('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω')

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ SMS –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö Novofon
        sms_data = None
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ
        if all(key in data for key in ['caller_id', 'caller_did', 'text']):
            sms_data = data
            logger.info(f"üì± WEBHOOK: –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç SMS –≤ –∫–æ—Ä–Ω–µ JSON")
            
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫–µ 'result'
        elif 'result' in data and isinstance(data['result'], dict):
            result = data['result']
            if all(key in result for key in ['caller_id', 'caller_did', 'text']):
                sms_data = result
                logger.info(f"üì± WEBHOOK: –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç SMS –≤ –±–ª–æ–∫–µ 'result'")
                
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        elif 'data' in data and isinstance(data['data'], dict):
            if all(key in data['data'] for key in ['caller_id', 'caller_did', 'text']):
                sms_data = data['data']
                logger.info(f"üì± WEBHOOK: –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç SMS –≤ –±–ª–æ–∫–µ 'data'")

        if sms_data is None:
            logger.warning(f"‚ùå WEBHOOK: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ SMS –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
            logger.warning(f"‚ùå WEBHOOK: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
            return JsonResponse({'status': 'error', 'message': '–î–∞–Ω–Ω—ã–µ SMS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö'}, status=400)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ SMS
        caller_id = sms_data.get('caller_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        caller_did = sms_data.get('caller_did', '–ù–µ —É–∫–∞–∑–∞–Ω') 
        text = sms_data.get('text', '–ù–µ —É–∫–∞–∑–∞–Ω')

        logger.info(f"üì± WEBHOOK: SMS –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
        logger.info(f"   üìû –û—Ç: {caller_id}")
        logger.info(f"   üìû –ù–∞: {caller_did}")
        logger.info(f"   üí¨ –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        rules = await get_rules_with_retry(user)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        matched_rules = []
        for rule in rules:
            from_whom_phone = rule.from_whom.telephone if rule.from_whom else '–ù–µ —É–∫–∞–∑–∞–Ω'
            logger.info(f"üîç WEBHOOK: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ ID {rule.id}: '{rule.sender}' (–Ω–æ–º–µ—Ä: {from_whom_phone}) -> {rule.to_whom.title if rule.to_whom else 'None'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ò –ø–æ–ª—É—á–∞—Ç–µ–ª—è SMS
            sender_matches = rule.sender in [caller_id, "–õ—é–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"]
            recipient_matches = rule.from_whom and rule.from_whom.telephone == caller_did
            
            if sender_matches and recipient_matches:
                matched_rules.append(rule)
                logger.info(f"‚úÖ WEBHOOK: –ø—Ä–∞–≤–∏–ª–æ ID {rule.id} –ø–æ–¥—Ö–æ–¥–∏—Ç (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_matches}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_matches})")
            else:
                logger.info(f"‚ùå WEBHOOK: –ø—Ä–∞–≤–∏–ª–æ ID {rule.id} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_matches}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_matches})")

        logger.info(f"üìã WEBHOOK: –Ω–∞–π–¥–µ–Ω–æ {len(matched_rules)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª –∏–∑ {len(rules)} –æ–±—â–∏—Ö")

        if matched_rules:
            logger.info(f"üöÄ WEBHOOK: –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...")
            tg_bot = Bot(settings.TOKEN_BOT)
            sent_count = 0
            
            for rule in matched_rules:
                try:
                    logger.info(f"üì§ WEBHOOK: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª '{rule.to_whom.title}' (ID: {rule.to_whom.chat_id})")

                    message_text = (f'–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {caller_id}\n'
                                    f'–ù–∞ –Ω–æ–º–µ—Ä: {caller_did}\n'
                                    f'–¢–µ–∫—Å—Ç: {text}')
                    
                    await tg_bot.send_message(chat_id=rule.to_whom.chat_id, text=message_text)
                    sent_count += 1
                    logger.info(f"‚úÖ WEBHOOK: SMS —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª '{rule.to_whom.title}'")
                    
                except Exception as e:
                    logger.error(f"üí• WEBHOOK: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª '{rule.to_whom.title}': {e}")

            logger.info(f"üìä WEBHOOK: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} –∏–∑ {len(matched_rules)} –∫–∞–Ω–∞–ª–æ–≤")
                    
            return JsonResponse({
                'status': 'success',
                'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã',
                'rules_count': len(matched_rules),
                'sent_count': sent_count
            }, status=200)
        else:
            logger.info(f"‚ÑπÔ∏è WEBHOOK: –¥–ª—è SMS –æ—Ç {caller_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª")
            return JsonResponse({
                'status': 'success',
                'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }, status=200)

    except Exception as e:
        logger.error(f"üí• WEBHOOK: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"üí• WEBHOOK: —Ç–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"üí• WEBHOOK: –ø–æ–ª–Ω—ã–π traceback:\n{traceback.format_exc()}")
        return JsonResponse({'status': 'error', 'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500) 
